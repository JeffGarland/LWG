<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4116" status="New">
<title><tt>enumerate_view::<i>iterator</i></tt> and <tt>cartesian_product_view::<i>iterator</i></tt> should not
    always provide <tt>iterator_category</tt></title>
<section><sref ref="[range.enumerate.iterator]"/><sref ref="[range.cartesian.iterator]"/></section>
<submitter>Hewill Kang</submitter>
<date>07 Jul 2024</date>
<priority>3</priority>

<discussion>
<p>
These two iterators do not support <tt>*r++</tt> for non-forward iterators,
so we should not provide <tt>iterator_category</tt> as they are not C++17 iterators.
</p>

<note>2025-10-21; Reflector poll.</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
Six votes for Tentatively Ready, but not unanimous.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4981"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.enumerate.iterator]"/> as indicated:</p>

<blockquote><pre>
namespace std::ranges {
  template&lt;view V&gt;
    requires <i>range-with-movable-references</i>&lt;V&gt;
  template&lt;bool Const&gt;
  class enumerate_view&lt;V&gt;::<i>iterator</i> {
    using <i>Base</i> = <i>maybe-const</i>&lt;Const, V&gt;;                         // <i>exposition only</i>

  public:
    using iterator_category = input_iterator_tag;      <ins>// present only if <i>Base</i>
                                                       // models forward_range</ins>
    using iterator_concept = <i>see below</i>;
    [&hellip;]
  };
}
</pre></blockquote>

</li>

<li><p>Modify <sref ref="[range.cartesian.iterator]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;input_range First, forward_range... Vs&gt;
    requires (view&lt;First&gt; &amp;&amp; ... &amp;&amp; view&lt;Vs&gt;)
  template&lt;bool Const&gt;
  class cartesian_product_view&lt;First, Vs...&gt;::<i>iterator</i> {
  public:
    using iterator_category = input_iterator_tag;      <ins>// present only if <i><i>maybe-const</i>&lt;Const, First&gt;</i>
                                                       // models forward_range</ins>
    using iterator_concept  = see below;
    [&hellip;]
  };
}
</pre>
</blockquote>

</li>
</ol>
</resolution>

</issue>
