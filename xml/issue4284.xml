<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4284" status="LEWG">
<title>Integer-class types should be formattable</title>
<section>
<sref ref="[format.formatter.spec]"/>
</section>
<submitter>Jiang An</submitter>
<date>27 Jun 2025</date>
<priority>3</priority>

<discussion>
<p>
The following program doesn't compile with MSVC STL (<a href="https://godbolt.org/z/aazK6bhqM">Godbolt link</a>).
</p>
<blockquote><pre>
#include &lt;format&gt;
#include &lt;ranges&gt;

int main() {
  auto iv1 = std::views::iota(42ull, 1729ull);
  auto iv2 = std::views::iota(iv1.begin(), iv1.end());
  std::format("{}", iv2.size()); // <span style="color:red;font-weight:bolder">Error</span>
}
</pre></blockquote>
<p>
In MSVC STL, the type of `iv2.size()` is an integer-class type, and the standard hasn't guaranteed there're 
enabled formatter specializations for integer-class types. As a result, this program is not guaranteed to 
be well-formed.
<p/>
Perhaps we should require enabled `std::formatter` specializations for integer-class types to get rid of 
such uncertainty and inconsistency.
</p>

<superseded>
<p>
This wording is relative to <paper num="N5008"/>.
</p>

<ol>
<li><p>Modify <sref ref="[format.formatter.spec]"/> as indicated:</p>

<blockquote>
<p>
-2- [&hellip;] Each header that declares the template
`formatter` provides the following enabled specializations:
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; [&hellip;]</p></li>
<li><p>(2.2) &mdash; [&hellip;]</p></li>
<li><p>(2.3) &mdash; [&hellip;]</p></li>
<li><p><ins>(2.?) &mdash; For each `charT`, for each cv-unqualified integer-class type 
(<sref ref="[iterator.concept.winc]"/>) `IntegerClass`, a specialization</ins>
</p>
<blockquote><pre>
<ins>template&lt;&gt; struct formatter&lt;IntegerClass, charT&gt;;</ins>
</pre></blockquote>
</li>
<li><p>(2.4) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</li>

</ol>
</superseded>

<note>2025-09-18; Jiang An improves wording</note>

<note>2025-10-21; Reflector poll. Status changed: NEW &rarr; LEWG.</note>
<p>
Set priority to 3 after reflector poll. Send to LEWG.
</p>
<p>
"Which additional operations integer-class types should be required to support
is a design question.
Why `format` but not iostreams? What about `to_chars`/`from_chars`?
All the stuff in <code>&lt;bit&gt;</code>? <code>&lt;utility&gt;</code>?
<code>&lt;cmath&gt;</code>?
You can show examples using any of these and claim 'uncertainty and inconsistency'."
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5014"/>.
</p>

<ol>
<li><p>Modify <sref ref="[format.formatter.spec]"/> as indicated:</p>

<blockquote>
<p>
-2- [&hellip;] Each header that declares the template
`formatter` provides the following enabled specializations:
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; [&hellip;]</p></li>
<li><p>(2.2) &mdash; [&hellip;]</p></li>
<li><p>(2.3) &mdash; [&hellip;]</p></li>
<li><p><ins>(2.?) &mdash; For each `charT`, for each cv-unqualified integer-class type 
(<sref ref="[iterator.concept.winc]"/>) `IntegerClass`, a specialization</ins>
</p>
<blockquote><pre>
<ins>template&lt;&gt; struct formatter&lt;IntegerClass, charT&gt;;</ins>
</pre></blockquote>
</li>
<li><p>(2.4) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</li>

<li><p>Modify <sref ref="[format.string.std]"/> as indicated:</p>

<blockquote>
<p>
-20- The meaning of some non-string presentation types is defined in terms of a call to 
`to_chars`. In such cases, let `[first, last)` be a range large enough to hold the 
`to_chars` output and `value` be the formatting argument value. <ins>If the formatting 
argument is of an integer-class type (<sref ref="[iterator.concept.winc]"/>), the 
formatting argument value is as-if converted to a hypothetical extended integer type 
of the same signedness and width as the integer-class type first.</ins> Formatting is done as if 
by calling `to_chars` as specified and copying the output through the output
iterator of the format context.
</p>

</blockquote>
</li>

<li><p>Modify <sref ref="[tab:format.type.int]"/> (Table 107) as indicated:</p>

<blockquote>
<p>
<b>Table 107 &mdash; Meaning of type options for integer <ins>and integer-class</ins> types [tab:format.type.int]</b>
</p>

</blockquote>
</li>
</ol>
</resolution>

</issue>
