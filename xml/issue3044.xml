<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3044" status="New">
<title>Strange specification of <tt>max_size()</tt> for an allocator</title>
<section><sref ref="[allocator.requirements]"/></section>
<submitter>Jon Cohen</submitter>
<date>6 Dec 2017</date>
<priority>3</priority>

<discussion>
<p>
Table 31 in the C++17 standard specifies <tt>X::max_size()</tt> (where <tt>X</tt> is an allocator type) as "The largest value 
that can meaningfully be passed to <tt>X::allocate()</tt>". Noticeably missing is the statement "<i>Throws:</i> Nothing".
<p/>
As an example of why this is an issue, note that <tt>vector::max_size()</tt> and <tt>allocator_traits::max_size()</tt> are 
both marked <tt>noexcept</tt>. We must then interpret <tt>max_size()</tt> as being allowed to sometimes call 
<tt>std::terminate</tt>, or else <tt>{vector, allocator_traits, ...}::max_size()</tt> must be allowed to directly calculate 
<tt>numeric_limits&lt;size_type&gt;::max() / sizeof(value_type)</tt> instead of querying the allocator, even if 
<tt>Alloc::max_size()</tt> exists. This seems like a bug in the wording for the requirements of <tt>max_size()</tt> in an 
allocator type. I think an issue should be opened on this subject to add <i>Throws:</i> Nothing or similar to the requirements 
of <tt>max_size()</tt> for an allocator.
<p/>
As an example consider writing up a framework to test the exception-safety of types in a given framework, since they were all 
written in an exception-free environment. One of the types in the framework is an allocator which, in a controlled way, 
can throw an exception at any point where it is allowed by the standard. It's important that the test framework be as pedantic 
as possible, so the allocator type throws on <tt>max_size()</tt>, since it is currently allowed to by the standard. When a 
reasonable <tt>vector</tt> implementation (at least those in libstdc++ and msvc) is, for example, asked to construct a 
<tt>vector</tt> from an <tt>initializer_list</tt>, it will call <tt>allocator_traits&lt;Alloc&gt;::max_size()</tt>, which will 
terminate the program because the exception thrown in <tt>Alloc::max_size()</tt> propagated through the <tt>noexcept</tt> 
traits function. Although this is conformant behavior, I think it's a bug in the standard that a function as benign as 
<tt>max_size()</tt> can terminate the program in this manner, and I think the fix is that a conformant allocator should be 
required to supply a non-throwing <tt>max_size()</tt> member function.
<p/>
Daniel:
<p/>
This problem was shortly discussed during review of LWG <iref ref="2162"/> (see comment 2012-08-05). At that time
the more drastic but also more consistent requirement that an allocator's <tt>max_size</tt> function shall not throw
exceptions has not been added. IMO this position should be reconsidered to follow the spirit of the new issue LWG 
<iref ref="3044"/>.
</p>

<note>2018-01; Priority set to 3 after mailing list discussion</note>

<note>2018-08-21, Jonathan comments and provides wording</note>
<p>
The phrase "the largest value that can meaningfully be passed to <tt>X::allocate()</tt>" is meaningless. Is it a 
requirement on the caller, so that larger values must not be passed? Or a hint from the allocator implementor that larger 
values will produce a <tt>bad_alloc</tt> exception? Can the return value change dynamically, based on the free memory
available to the allocator?! &mdash; LWG <iref ref="197"/> says it can't change.
<p/>
As noted in the LWG <iref ref="2162"/> comments, we don't currently guarantee it can be called on a <tt>const</tt> object 
(so <tt>allocator_traits</tt> will not use the allocator's <tt>max_size()</tt> if it's non-<tt>const</tt>, although that was 
unclear before DR <iref ref="2284"/>). In addition to adding "<i>Throws:</i> nothing" we should ensure it's callable 
on <tt>const</tt> lvalues, and clarify what "meaningfully" means and who is supposed to care about it. My proposed 
resolution doesn't achieve all of this, but is a start.
</p>

<p>
<strong>Previous resolution [SUPERSEDED]:</strong>
</p>
<blockquote class="note">
<p>
This wording is relative to <paper num="N4762"/>.
</p>

<ol>
<li><p>Change <sref ref="[allocator.requirements]"/>, Table 32 &mdash; "Descriptive variable definitions", as indicated:</p>
<blockquote>
<table border="1">
<caption>Table 32 &mdash; Descriptive variable definitions</caption>
<tr>
<th>Variable</th>
<th>Definition</th>
</tr>

<tr>
<td>
<tt>T, U, C</tt>
</td>
<td>
any <i>cv</i>-unqualified object type (3.9)
</td>
</tr>

<tr>
<td colspan="2" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>a, a1, a2</tt>
</td>
<td>
lvalues of type <tt>X</tt>
</td>
</tr>

<tr>
<td>
<ins><tt>a3</tt></ins>
</td>
<td>
<ins>an lvalue of type <tt>const X</tt></ins>
</td>
</tr>

<tr>
<td colspan="2" align="center">
<tt>&hellip;</tt>
</td>
</tr>

</table>
</blockquote>
</li>

<li><p>Change <sref ref="[allocator.requirements]"/>, Table 33 &mdash; "<i>Cpp17Allocator</i> requirements", as indicated:</p>
<blockquote>
<table border="1">
<caption>Table 33 &mdash; <i>Cpp17Allocator</i> requirements</caption>
<tr>
<th>Expression</th>
<th>Return type</th>
<th>Assertion&#47;note<br/>pre-&#47;post-condition</th>
<th>Default</th>
</tr>

<tr>
<td colspan="4" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>a<ins>3</ins>.max_size()</tt>
</td>
<td>
<tt>X::size_type</tt>
</td>
<td>
the largest value that can<br/>
meaningfully be passed to<br/>
<tt>X::allocate()</tt><ins>.<br/> 
[<i>Note:</i> Larger values might cause<br/> 
an exception to be thrown. &mdash; <i>end note</i>]<br/> 
<i>Throws:</i> Nothing.</ins>
</td>
<td>
<tt>numeric_limits&lt;size_type&gt;::max()<br/>
/ sizeof(value_type)</tt>
</td>
</tr>

<tr>
<td colspan="4" align="center">
<tt>&hellip;</tt>
</td>
</tr>

</table>
</blockquote>

</li>
</ol>
</blockquote>

<note>2022-04-25; Daniel rebases wording on <paper num="N4910"/></note>
<superseded>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Change <sref ref="[allocator.requirements.general]"/> as indicated:</p>


<blockquote>
<p>
-2- In subclause <sref ref="[allocator.requirements]"/>,
</p>
<ol style="list-style-type:none">
<li><p>(2.1) &mdash; [&hellip;]</p></li>
<li><p>[&hellip;]</p></li>
<li><p>(2.6) &mdash; <tt>a</tt>, <tt>a1</tt>, <tt>a2</tt> denote lvalues of type <tt>X</tt>,</p></li>
<li><p><ins>(?.?) &mdash; <tt>a3</tt> denotes an lvalue of type <tt>const X</tt>,</ins></p></li>
<li><p>[&hellip;]</p></li>
</ol>
<p>[&hellip;]</p>
<pre>
a<ins>3</ins>.max_size()
</pre>
<blockquote>
<p>
-50- <i>Result:</i> <tt>X::size_type</tt>
<p/>
-51- <i>Returns:</i> The largest value that can meaningfully be passed to <tt>X::allocate()</tt>.
<p/>
<ins>[<i>Note:</i> Larger values might cause an exception to be thrown. &mdash; <i>end note</i>]</ins> 
<p/>
<ins>-?- <i>Throws:</i> Nothing.</ins>
<p/>
-52- <i>Remarks:</i> Default: <tt>numeric_limits&lt;size_type&gt;::max() / sizeof(value_type)</tt>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</superseded>

<note>2025-10-10; Jonathan provides improved wording</note>
<note>2025-10-18; Jonathan removes the note from the wording</note>
<p>
After reflector discussion, I've remove the following note from the proposed resolution:
<ins>[<i>Note:</i> Larger values can cause an exception to be thrown. &mdash; <i>end note</i>]</ins>
</p>
<p>
I also suggested an alternative:
<ins>[<i>Note:</i>
Containers and other users of allocators can use this function to avoid
making calls to `X::allocate` which are unlikely ever to succeed.
&mdash; <i>end note</i>]</ins>
</p>
<p>
Those notes will be recorded here, but are not part of the proposed resolution.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5014"/>.
</p>

<ol>
<li><p>Change <sref ref="[allocator.requirements.general]"/> as indicated:</p>


<blockquote>
<p>
-2- In subclause <sref ref="[allocator.requirements]"/>,
</p>
<ol style="list-style-type:none">
<li><p>(2.1) &mdash; [&hellip;]</p></li>
<li><p>[&hellip;]</p></li>
<li><p>(2.6) &mdash; <tt>a</tt>, <tt>a1</tt>, <tt>a2</tt> denote lvalues of type <tt>X</tt>,</p></li>
<li><p><ins>(?.?) &mdash; <tt>a3</tt> denotes an lvalue of type (possibly const) <tt>X</tt>,</ins></p></li>
<li><p>[&hellip;]</p></li>
</ol>
<p>[&hellip;]</p>
<pre>
a<ins>3</ins>.max_size()
</pre>
<blockquote>
<p>
-50- <i>Result:</i> <tt>X::size_type</tt>
<p/>
-51- <i>Returns:</i> The largest value that can meaningfully be passed to <tt>X::allocate()</tt>.
<p/>
<ins>-?- <i>Throws:</i> Nothing.</ins>
<p/>
-52- <i>Remarks:</i> Default: <tt>numeric_limits&lt;size_type&gt;::max() / sizeof(value_type)</tt>
</p>
</blockquote>
</blockquote>
</li>

</ol>

</resolution>

</issue>
