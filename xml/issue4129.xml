<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4129" status="New">
<title>Possibly incorrect wording for data race avoidance</title>
<section><sref ref="[res.on.data.races]"/></section>
<submitter>Jiang An</submitter>
<date>30 Jul 2024</date>
<priority>3</priority>

<discussion>
<p>
From PR <a href="https://github.com/cplusplus/draft/pull/6748">cplusplus/draft#6748</a> 
which was closed as non-editorial.
<p/>
Currently, <sref ref="[res.on.data.races]"/> is talking about arguments and "including <tt>this</tt>", 
but <tt>this</tt> is not a function argument. Moreover, it seems more appropriate to say that a function 
accesses some object via a parameter.
<p/>
It might need to be considered whether we should use the more general term "range" instead of "container", 
which will cover <tt>std::span</tt>, etc.
</p>

<note>2025-10-14; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
"'non-const parameters' needs to be fixed, this isn't about
top-level const, e.g. <code>std::string&amp;</code> is not a const type."
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4986"/>.
</p>

<ol>
<li><p>Modify <sref ref="[res.on.data.races]"/> as indicated:</p>

<blockquote>
<p>
-2- A C++ standard library function shall not directly or indirectly access objects 
(<sref ref="[intro.multithread]"/>) accessible by threads other than the current thread 
unless the objects are accessed directly or indirectly via the function's 
<del>arguments</del><ins>parameters</ins>, including <del><tt>this</tt></del><ins>the 
object parameter (if any)</ins>.
<p/>
-3- A C++ standard library function shall not directly or indirectly modify objects 
(<sref ref="[intro.multithread]"/>) accessible by threads other than the current thread 
unless the objects are accessed directly or indirectly via the function's non-const
<del>arguments</del><ins>parameters</ins>, including <del><tt>this</tt></del><ins>the 
object parameter (if any)</ins>.
<p/>
[&hellip;]
<p/>
-5- A C++ standard library function shall not access objects indirectly accessible via 
its <del>arguments</del><ins>parameters</ins> or via elements of its container 
<del>arguments</del><ins>parameters</ins> except by invoking functions required by its 
specification on those container elements.
</p>
</blockquote>

</li>

</ol>
</resolution>

</issue>
