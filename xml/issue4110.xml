<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4110" status="New">
<title>`shared_ptr(nullptr_t, Deleter)` is overconstrained, breaking some sensible deleters</title>
<section><sref ref="[util.smartptr.shared.const]"/></section>
<submitter>Louis Dionne</submitter>
<date>11 Jun 2024</date>
<priority>3</priority>

<discussion>
<p>
The following code doesn't compile on conforming implementations:
<pre><code>
    #include &lt;memory&gt;

    void f() {
        std::shared_ptr&lt;int&gt;(new int, [](auto pointer) { delete pointer; });
    }
</code></pre>
<a href="https://gcc.godbolt.org/z/7hs34ded7">(Godbolt)</a>
</p><p>
This is caused by the constraint on `shared_ptr(nullptr_t p, D d);`
being that `d(p)` is valid (<sref ref="[util.smartptr.shared.const]"/> p9),
which leads to a hard error inside the lambda since it is called with a
`nullptr_t`. This seems unintended.
</p><p>
See <a href="https://github.com/llvm/llvm-project/pull/93071#issuecomment-2158494851">LLVM issue 93071 comment</a> for additional context.
</p>

<note>2025-10-22; Reflector poll.</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
"I don't agree with the proposed resolution. As a general principle,
<code>shared_ptr&lt;T&gt;(p, d)</code> always calls `d(p)` and never
<code>d(static_cast&lt;T*&gt;(p))</code>.
<br/>
If we really want to make this work, which is not unreasonable, even though
the fix on the user side is trivial, we should make the `nullptr_t` constructor
templated on <code>same_as&lt;nullptr_t&gt;</code>
(or <code>convertible_to&lt;nullptr_t&gt;</code>?)."
</p>
<p>
"That would break passing `NULL`, only `nullptr` would work.
It can be made to work by checking that `d(p)` is well-formed in a
function parameter with a default argument,
instead of as a template parameter:"
<pre>struct shared_ptr {
  template&lt;class Y, class D&gt;
  shared_ptr(Y* p, D d, std::void_t&lt;decltype(d(p))&gt;* = nullptr) {}
  template&lt;class D&gt;
  shared_ptr(std::nullptr_t p, D d, std::void_t&lt;decltype(d(p))&gt;* = nullptr) {}
};
shared_ptr s(new int, [](auto p) {delete p;});
</pre>
</p>
<p>
"Ugh. We don't have to use it everywhere, only these two specific constructors."
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4981"/>.
</p>
<ol>
<li>
In <sref ref="[util.smartptr.shared.const]"/>/9, specify that
`shared_ptr(nullptr_t p, D d);` checks whether
<code>d(static_cast&lt;T*&gt;(nullptr))</code>
is well-formed. This requires expressing the the constraints for
the `Y*` constructors and the `nullptr_t` constructors separately,
which is mostly editorial:
<blockquote>
<pre><code>
template&lt;class Y, class D&gt; shared_ptr(Y* p, D d);
template&lt;class Y, class D, class A&gt; shared_ptr(Y* p, D d, A a);
<del>template&lt;class D&gt; shared_ptr(nullptr_t p, D d);
template&lt;class D, class A&gt; shared_ptr(nullptr_t p, D d, A a);</del>
</code></pre>
<p>-9-
<i>Constraints</i>:
<code>is_move_constructible_v&lt;D&gt;</code> is `true`,
and `d(p)` is a well-formed expression.
<del>For the first two overloads:</del>
<ol style="list-style-type:none">
<li>
(9.1) If `T` is an array type, then either `T` is `U[N]` and `Y(*)[N]`
is convertible to `T*`, or `T` is `U[]` and `Y(*)[]` is convertible to `T*`.
</li>
<li>
(9.2) If `T` is not an array type, then `Y*` is convertible to `T*`.
</li>
</ol>
</p>
<pre><code>
<ins>template&lt;class D&gt; shared_ptr(nullptr_t p, D d);
template&lt;class D, class A&gt; shared_ptr(nullptr_t p, D d, A a);</ins>
</code></pre>
<p><ins>-?-
<i>Constraints</i>:
<code>is_move_constructible_v&lt;D&gt;</code> is `true`,
and <code>d(static_cast&lt;T*&gt;(p))</code> is a well-formed expression.
</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
