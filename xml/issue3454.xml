<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3454" status="Open">
<title><tt>pointer_traits::pointer_to</tt> should be <tt>constexpr</tt></title>
<section><sref ref="[pointer.traits]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>21 Jun 2020</date>
<priority>4</priority>

<discussion>
<p>
Trying to implement a <tt>constexpr std::list</tt> (inspired by Tim Song's
note on using variant members in the node) as part of evaluating
the <tt>constexpr</tt> container and adapters proposals, I hit problems
I could not code around in <tt>pointer_traits</tt>, as only the specialization
for native pointers has a <tt>constexpr pointer_to</tt> function.
<p/>
This means that containers of my custom allocator, that delegates
all allocation behavior to <tt>std::allocator&lt;T&gt;</tt> but adds extra
telemetry and uses a fancy pointer, does not work with the approach
I tried for implementing <tt>list</tt> (common link type, shared between
nodes, and stored as <tt>end</tt> sentinel directly in the <tt>list</tt> object).
</p>

<note>2020-07-17; Forwarded to LEWG after review in telecon</note>

<note>2022-07-19; Casey Carter comments</note>
<p>
 This is no longer simply a theoretical problem that impedes implementing 
 <tt>constexpr std::list</tt>, but an actual defect affecting current 
 implementations of <tt>constexpr std::string</tt>. More specifically, it 
 makes it impossible to  support so-called "fancy pointers" in a <tt>constexpr 
 basic_string</tt> that performs the small string optimization (SSO). 
 (<tt>pointer_traits::pointer_to</tt> is critically necessary to get a 
 pointer that designates the SSO buffer.) As things currently stand, 
 <tt>constexpr basic_string</tt> can support fancy pointers <em>or</em> SSO, 
 but not both.
</p>
<note>Wroc≈Çaw 2024-11-18; LEWG approves the direction</note>
<p>
Should there be an Annex C entry noting that program-defined specializations
need to add `constexpr` to be conforming?
</p>

<note>2025-10-20; Set priority to 4 based on age of issue and lack of recent interest.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4861">N4861</a>. 
</p>

<ol>
<li><p>Modify <sref ref="[pointer.traits]"/> as indicated:</p>

<blockquote>
<p>
-1- The class template <tt>pointer_traits</tt> supplies a uniform interface to certain attributes of pointer-like types.
</p>
<blockquote>
<pre>
namespace std {
  template&lt;class Ptr&gt; struct pointer_traits {
    using pointer         = Ptr;
    using element_type    = <i>see below</i>;
    using difference_type = <i>see below</i>;
    
    template&lt;class U&gt; using rebind = <i>see below</i>;
    
    static <ins>constexpr</ins> pointer pointer_to(<i>see below</i> r);
  };
  [&hellip;]
}
</pre>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[pointer.traits.functions]"/> as indicated:</p>

<blockquote>
<pre>
static <ins>constexpr</ins> pointer pointer_traits::pointer_to(<i>see below</i> r);
static constexpr pointer pointer_traits&lt;T*&gt;::pointer_to(<i>see below</i> r) noexcept;
</pre>
<blockquote>
<p>
-1- <i>Mandates:</i> For the first member function, <tt>Ptr::pointer_to(r)</tt> is well-formed.
<p/>
-2- <i>Preconditions:</i> For the first member function, <tt>Ptr::pointer_to(r)</tt> returns a pointer 
to <tt>r</tt> through which indirection is valid.
<p/>
-3- <i>Returns:</i> The first member function returns <tt>Ptr::pointer_to(r)</tt>. The second member function
returns <tt>addressof(r)</tt>.
<p/>
-4- <i>Remarks:</i> If <tt>element_type</tt> is <i>cv</i> <tt>void</tt>, the type of <tt>r</tt> is unspecified; 
otherwise, it is <tt>element_type&amp;</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
