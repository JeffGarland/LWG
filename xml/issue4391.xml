<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4391" status="New">
<title>Ambiguities of `simd::basic_vec` constructor</title>
<section><sref ref="[simd.ctor]"/></section>
<submitter>Hewill Kang</submitter>
<date>29 Sep 2025</date>
<priority>99</priority>

<discussion>
<p>
The broadcasting, generator-based, and range constructors of `simd::basic_vec` all take a single
argument, and their constraints are not mutually exclusive.
<p/>
This means that when a type satisfies both characteristics, such as a range that can be converted to a
`value_type`, this will lead to ambiguity:
</p>
<blockquote>
<pre>
#include &lt;simd&gt;

struct S {
  operator double() const;       // basic_vec(U&amp;&amp; value)
  
  double operator()(int) const;  // basic_vec(G&amp;&amp; gen)

  double* begin() const;         // basic_vec(R&amp;&amp; r, flags&lt;Flags...&gt; = {});
  double* end() const;
  constexpr static int size() { return 2; }
};

int main() {
  std::simd::vec&lt;double&gt; simd(S{}); // <span style="color:#C80000;font-weight:bold">error: call of overloaded 'basic_simd(S)' is ambiguous</span>
}
</pre>
</blockquote>
<p>
Do we need more constraints, similar to the one in <code>string_view(R&amp;&amp; r)</code> that requires
`R` not to be convertible to `const char*`, to make the above work, i.e., only invoke the
broadcasting constructor?
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5014"/>.
</p>

<ol>


<li><p>Modify <sref ref="[simd.ctor]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class G&gt; constexpr explicit basic_vec(G&amp;&amp; gen);
</pre>
<blockquote>
<p>
-8- Let <tt>From<sub><i>i</i></sub></tt> denote the type
   <code>decltype(gen(integral_constant&lt;<i>simd-size-type</i>, <i>i</i>&gt;()))</code>.
<p/>
-9- <i>Constraints</i>:
</p>
<ol style="list-style-type: none">
   <li><p>
   <ins>(9.?) &mdash; <code>constructible_from&lt;value_type, G&gt;</code> is <code>false</code>.</ins>
   </p></li>
   <li><p>
    <ins>(9.?) &mdash;</ins>
    <tt>From<sub><i>i</i></sub></tt> satisfies <code>convertible_to&lt;value_type&gt;</code> for all 
    <tt><i>i</i></tt> in the range of [<code>0, size()</code>). In addition, for all <i>i</i> in the range of
    [<code>0, size()</code>), if <tt>From<sub><i>i</i></sub></tt> is an arithmetic type, conversion from 
    <tt>From<sub><i>i</i></sub></tt> to <code>value_type</code> is value-preserving.</p>
   </li>
</ol>
</blockquote>
[&hellip;]
<pre>
template&lt;class R, class... Flags&gt;
  constexpr basic_vec(R&amp;&amp; r, flags&lt;Flags...&gt; = {});
template&lt;class R, class... Flags&gt;
  constexpr basic_vec(R&amp;&amp; r, const mask_type&amp; mask, flags&lt;Flags...&gt; = {});
</pre>
<blockquote>
<p>
-12- Let mask be `mask_type(true)` for the overload with no `mask` parameter.
<p/>
-13- <i>Constraints</i>:
</p>
<ol style="list-style-type: none">
   <li><p>
   (13.1) &mdash; `R` models `ranges::contiguous_range` and `ranges::sized_range`,
   </p></li>
   <li><p>
   (13.2) &mdash; `ranges::size(r)` is a constant expression, <del>and</del>
   </p></li>
   <li><p>
   (13.3) &mdash; `ranges::size(r)` is equal to `size()`<del>.</del><ins>,</ins>
   </p></li>
   <li><p>
   <ins>(13.?) &mdash; <code>constructible_from&lt;value_type, R&gt;</code> is `false`, and</ins>
   </p></li>
   <li><p>
   <ins>(13.?) &mdash; <code>r(integral_constant&lt;<i>simd-size-type</i>, 0&gt;())</code> is not a valid
            expression.</ins>
   </p></li>
</ol>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
