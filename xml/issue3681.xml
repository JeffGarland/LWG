<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3681" status="New">
<title>Further considerations on LWG 3679 (using `pmr::vector` without including <code>&lt;memory_resource&gt;</code>)</title>
<section><sref ref="[mem.res.syn]"/><sref ref="[memory.syn]"/></section>
<submitter>Jiang An</submitter>
<date>28 Feb 2022</date>
<priority>4</priority>

<discussion>
<p>
The issue reflected in LWG <iref ref="3679"/> is not limited to <tt>&lt;ranges&gt;</tt> and 
<tt>std::ranges::istream_view</tt>.
<p/>
Example:
</p>
<blockquote><pre>
 #include &lt;vector&gt;
// some standard headers other than &lt;memory&gt; and &lt;memory_resource&gt;

template&lt;class T&gt; my_ator {/*definition, meeting the requirements of <i>Cpp17Allocator</i>*/};

int main()
{
  std::vector&lt;int&gt; v1; // Generally works. Is this guaranteed?
  std::pmr::vector&lt;int&gt; v2; // Usually fails to work on libstdc++. Is this intendedly permitted??
  std::vector&lt;int, my_ator&lt;int&gt;&gt; v3; // Generally works. Is this guaranteed?
}
</pre></blockquote>
<p>
Currently libstdc++ only provides forward declarations of <tt>std::pmr::polymorphic_allocator</tt> 
in headers of standard allocator-aware containers, which means that users are required to include 
both <tt>&lt;memory_resource&gt;</tt> and <tt>&lt;vector&gt;</tt> in order to create a 
<tt>std::pmr::vector&lt;T&gt;</tt> object. If libstdc++ is technically conforming here, one may say 
the definition of <tt>std::allocator</tt> is also not guaranteed to be available in these headers, 
so <tt>&lt;memory&gt;</tt> is required to be included together with such a header to make 
<tt><i>standard-container</i>&lt;T&gt;</tt> work.
<p/>
Furthermore, the specification of allocator-aware containers are heavily dependent on 
<tt>std::allocator_traits</tt>. If these containers are not guaranteed to work when the definition of 
<tt>std::allocator_traits</tt> is not available, and the definition of <tt>std::allocator_traits</tt> 
is not guaranteed to be provided in headers of these containers, then users are effectively always 
required to include <tt>&lt;memory&gt;</tt> in order to create a container object, even if they are 
using their own allocators.
</p>

<note>2022-05-17; Reflector poll</note>
<p>
Set priority to 4 after reflector poll.
</p>

<note>2025-10-22; Jonathan comments after reflector discussion.</note>
<p>
"We could use the 'In addition to being available via inclusion of ...' form,
see also LWG <iref ref="3623"/>."
</p>
</discussion>

<resolution>
</resolution>

</issue>
