<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2533" status="Open">
<title>[concurr.ts] Constrain threads where <tt>future::then</tt> can run a continuation</title>
<section><sref ref="[futures.unique.future]"/></section>
<submitter>Agust&iacute;n K-ballo Berg&eacute;</submitter>
<date>3 Sep 2015</date>
<priority>4</priority>

<discussion>
<p><b>Addresses: concurr.ts</b></p>
<p>
In <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4538.pdf">N4538</a>, the continuation given to
<tt>future::then</tt> can be run "on an unspecified thread of execution". This is too broad, as it allows the
continuation to be run on the main thread, a UI thread, or any other thread. In comparison, functions given to
<tt>async</tt> run "as if in a new thread of execution", while the Parallelism TS gives less guarantees by running
"in either the invoking thread or in a thread implicitly created by the library to support parallel algorithm execution".
The threads on which the continuation given to <tt>future::then</tt> can run should be similarly constrained.
</p>

<note>2017-03-01, Kona, SG1</note>
<p>
Agreement that this is a problem. Suggested addition to the issue is below. We have no immediate delivery vehicle
for a fix at the moment, but we would like to make the intended direction clear.
<p/>
There is SG1 consensus that <tt>.then</tt> continuations should, by default, and in the absence of executors, be run
only in the following ways:
</p>
<ol>
<li><p>If the future is not ready when <tt>.then()</tt> is called, the <tt>.then</tt> argument may be run on the execution
agent that fulfills the promise.</p></li>
<li><p>In all cases, the <tt>.then</tt> argument may be run on an implementation-provided thread, i.e. a thread that is
neither the main thread nor explicitly created by the user.</p></li>
</ol>
<p>
In the absence of an executor argument (which currently cannot be supplied), running of the <tt>.then()</tt> continuation
will not block the thread calling <tt>.then()</tt>, even if the future is ready at the time.
<p/>
Straw polls:
<p/>
SF | F | N | A | SA
<p/>
For the default behaviour:
<p/>
"1. Run on completed task or new execution agent"
<p/>
0 | 7 | 5 | 1 | 0
<p/>
"2. Run on completed task or <tt>.then</tt> caller"
<p/>
0 | 0 | 5 | 5 | 3
<p/>
"3. Leave as implementation defined"
<p/>
1 | 2 | 4 | 3 | 3
<p/>
"4. Always new execution agent"
<p/>
2 | 3 | 6 | 2 | 0
<p/>
The actual conclusion was to allow either (1) or (4) for now, since they are quite close, but present a very different
programming mode from (2).
</p>

<note>2025-10-20; Reflector poll.</note>
<p>
Set priority to 4 based on age of issue and apparent lack of interest.
</p>
</discussion>

<resolution>
</resolution>

</issue>
