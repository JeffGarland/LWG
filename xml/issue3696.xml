<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3696" status="New">
<title>"Basic integral types" should not be used</title>
<section><sref ref="[stream.types]"/></section>
<submitter>Jiang An</submitter>
<date>07 May 2022</date>
<priority>3</priority>

<discussion>
<p>
Raised from editorial issue <a href="https://github.com/cplusplus/draft/issues/5240">#5240</a>.
<p/>
The phrase "signed basic integral types" in <sref ref="[stream.types]"/> has been present since C++98 but 
never defined. It is unclear whether "basic integral types" are "standard integer types" or "integer types" 
(including extended integer types).
<p/>
As <tt>std::streamoff</tt> should be wide enough to represent the largest possible file size, and 
<tt>std::uintmax_t</tt> is used as the return type of <tt>std::filesystem::file_size</tt>, we should not 
disallow <tt>std::streamoff</tt> to be an extended integer type which may be wider than <tt>long long</tt>. 
On the other hand, as <tt>std::size_t</tt> and <tt>std::ptrdiff_t</tt> have already been allowed to be 
extended integer types, <tt>std::streamsize</tt> should also be allowed to be an extended integer type for consistency.
<p/>
So I think we should just use "signed integer types" instead of "signed basic integral types" in 
<sref ref="[stream.types]"/>.
</p>

<note>2022-05-17; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

<note>2025-06-16; Jonathan adds wording</note>

<superseded>
<p>
This wording is relative to <paper num="N5008"/>.
</p>

<ol>
<li><p>Modify <sref ref="[stream.types]"/> as indicated:</p>

<blockquote>
<pre>using streamoff = implementation-defined;</pre>
<p>
-1- The type `streamoff` is a synonym for one of the
signed <del>basic</del> integral types
of sufficient size to represent the maximum possible file size
for the operating system.<sup>256</sup>
</p>
<pre>using streamsize = implementation-defined;</pre>
<p>
-2-
The type `streamsize` is a synonym for one of the
signed <del>basic</del> integral types.
It is used to represent the number of characters transferred
in an I/O operation, or the size of I/O buffers.<sup>257</sup>
</p>

<p>
<sub>256) Typically `long long`.</sub>
</p>
<p>
<sub>257) Most places where `streamsize` is used would use `size_t` in C,
or `ssize_t` in POSIX.</sub>
</p>
</blockquote>
</li>
</ol>

</superseded>

<note>2025-10-21; Jonathan provides improved wording</note>

</discussion>

<resolution>

<p>
This wording is relative to <paper num="N5008"/>.
</p>

<ol>
<li><p>Modify <sref ref="[stream.types]"/> as indicated:</p>

<blockquote>
<pre>using streamoff = implementation-defined;</pre>
<p>
-1- The type `streamoff` is a synonym for one of the
signed <ins>integer</ins> <del>basic integral</del> types
of sufficient size to represent the maximum possible file size
for the operating system.<sup>256</sup>
</p>
<pre>using streamsize = implementation-defined;</pre>
<p>
-2-
The type `streamsize` is a synonym for one of the
signed <ins>integer</ins> <del>basic integral</del> types.
It is used to represent the number of characters transferred
in an I/O operation, or the size of I/O buffers.<sup>257</sup>
</p>

<p>
<sub>256) Typically `long long`.</sub>
</p>
<p>
<sub>257) Most places where `streamsize` is used would use `size_t` in C,
or `ssize_t` in POSIX.</sub>
</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>
