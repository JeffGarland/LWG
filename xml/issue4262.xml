<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4262" status="New">
<title>`copy_if`, `remove_copy`, `remove_copy_if`, `unique_copy` have too strong preconditions</title>
<section><sref ref="[alg.copy]"/><sref ref="[alg.remove]"/><sref ref="[alg.unique]"/></section>
<submitter>Alex Guteniev</submitter>
<date>12 May 2025</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[alg.copy]"/>/16 , <sref ref="[alg.remove]"/>/11, <sref ref="[alg.unique]"/>/8.1 all say:
</p>
<blockquote>
<p>
<i>Preconditions</i>: The ranges `[first, last)` and `[result, result + (last - first))` do not overlap.
</p>
</blockquote>
<p>
These algorithms may produce fewer elements than `(last - first)`. If this is known in advance, 
a smaller output range may be used, so that the precondition will not be satisfied.
<p/>
Example from LLVM test suite 
(<a href="https://github.com/llvm/llvm-project/blob/79210feb2993ff9a79ef11f8a7016a527d4fcf22/libcxx/test/std/algorithms/alg.modifying.operations/alg.copy/ranges.copy_if.pass.cpp#L160-L162">
/libcxx/test/std/algorithms/alg.modifying.operations/alg.copy/ranges.copy_if.pass.cpp</a>):
</p>
<blockquote><pre>
std::array&lt;S, 4&gt; in = {{{4, 2}, {1, 3}, {3, 4}, {3, 5}}};
std::array&lt;S, 2&gt; out;
auto ret = std::ranges::copy_if(in.begin(), in.end(), out.begin(), [](int i) { return i == 3; }, &amp;S::val);
</pre></blockquote>
<p>
I think there should be a weaker precondition, like <sref ref="[alg.copy]"/>/2:
</p>
<blockquote>
<p>
<i>Preconditions</i>: `result` is not in the range `[first, last)`.
</p>
</blockquote>

<note>2025-10-21; Reflector poll.</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
"The proposed resolution is incorrect, because the output iterator could ‘enter’
the range [first, last) via being incremented. If the output iterator is a
reverse iterator, it starts writing to the end of [first,last) before we
need to read from there."
</p>
<p>
"NAD - nothing is broken with the existing constraint. Relaxing it is a design change."
</p>
<p>
"NAD.  The right behavior, if the algorithm runs out of output space,
is to return the last processed input iterator and the "next spot"
output iterator.  This is what <paper num="P3179"/>  (parallel ranges algorithms) does
with its range-as-output algorithms.  I would not want the proposed
resolution without this change.  Otherwise, we would be introducing
new UB unnecessarily."
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5008"/>.
</p>
<ol>

<li><p>Modify <sref ref="[alg.copy]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class InputIterator, class OutputIterator, class Predicate&gt;
  constexpr OutputIterator copy_if(InputIterator first, InputIterator last,
                                   OutputIterator result, Predicate pred);
[&hellip;]
template&lt;input_range R, weakly_incrementable O, class Proj = identity,
         indirect_unary_predicate&lt;projected&lt;iterator_t&lt;R&gt;, Proj&gt;&gt; Pred&gt;
  requires indirectly_copyable&lt;iterator_t&lt;R&gt;, O&gt;
  constexpr ranges::copy_if_result&lt;borrowed_iterator_t&lt;R&gt;, O&gt;
    ranges::copy_if(R&amp;&amp; r, O result, Pred pred, Proj proj = {});
</pre>
<blockquote>
<p>
-15- Let <tt><i>E</i></tt> be: [&hellip;]
<p/>
-16 <i>Preconditions</i>: <ins>`result` is not in the range `[first, last)`</ins><del>The ranges `[first, last)` and `[result, result + (last - first))` do not overlap</del>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[alg.remove]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class InputIterator, class OutputIterator,
         class T = iterator_traits&lt;InputIterator&gt;::value_type>
  constexpr OutputIterator
    remove_copy(InputIterator first, InputIterator last,
                OutputIterator result, const T&amp; value);
[&hellip;]
template&lt;input_range R, weakly_incrementable O, class Proj = identity,
         indirect_unary_predicate&lt;projected&lt;iterator_t&lt;R&gt;, Proj&gt;&gt; Pred&gt;
  requires indirectly_copyable&lt;iterator_t&lt;R&gt;, O&gt;
  constexpr ranges::remove_copy_if_result&lt;borrowed_iterator_t&lt;R&gt;, O&gt;
    ranges::remove_copy_if(R&amp;&amp; r, O result, Pred pred, Proj proj = {});
</pre>
<blockquote>
<p>
-8- Let <tt><i>E</i></tt> be [&hellip;]
<p/>
[&hellip;]
<p/>
-11 <i>Preconditions</i>: <ins>`result` is not in the range `[first, last)`</ins><del>The ranges `[first, last)` and `[result, result + (last - first))` do not overlap</del>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[alg.unique]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class InputIterator, class OutputIterator&gt;
  constexpr OutputIterator
    unique_copy(InputIterator first, InputIterator last,
                OutputIterator result);
[&hellip;]
template&lt;input_range R, weakly_incrementable O, class Proj = identity,
         indirect_equivalence_relation&lt;projected&lt;iterator_t&lt;R&gt;, Proj&gt;&gt; C = ranges::equal_to&gt;
  requires indirectly_copyable&lt;iterator_t&lt;R&gt;, O&gt; &amp;&amp;
          (forward_iterator&lt;iterator_t&lt;R&gt;&gt; ||
          (input_iterator&lt;O&gt; &amp;&amp; same_as&lt;range_value_t&lt;R&gt;, iter_value_t&lt;O&gt;&gt;) ||
          indirectly_copyable_storable&lt;iterator_t&lt;R&gt;, O&gt;)
  constexpr ranges::unique_copy_result&lt;borrowed_iterator_t&lt;R&gt;, O&gt;
    ranges::unique_copy(R&amp;&amp; r, O result, C comp = {}, Proj proj = {});
</pre>
<blockquote>
<p>
-6- Let `pred` be [&hellip;]
<p/>
-7- <i>Mandates</i>: [&hellip;]
<p/>
-8 <i>Preconditions</i>:
</p>
<ol style="list-style-type: none">
<li><p>(8.1) &mdash; <ins><ins>`result` is not in the range `[first, last)`</ins></ins><del>The ranges `[first, last)` and `[result, result + (last - first))` do not overlap</del>.</p></li>
<li><p>(8.2) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
