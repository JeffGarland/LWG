<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4009" status="Tentatively NAD">
<title><tt>drop_view::begin const</tt> may have &#x1d4aa;(n) complexity</title>
<section><sref ref="[range.drop.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>08 Nov 2023</date>
<priority>3</priority>

<discussion>
<p>
<tt>drop_view::begin const</tt> is specified to return <tt>ranges::next(ranges::begin(<i>base_</i>), 
<i>count_</i>, ranges::end(<i>base_</i>))</tt>, which has &#x1d4aa;(n) complexity when <i>base_</i> 
is a random-access-sized but non-common range (<a href="https://godbolt.org/z/jYdo9K6jn">demo</a>):
</p>
<blockquote><pre>
#include &lt;ranges&gt;

int main() {
  const auto s = std::ranges::subrange(std::views::iota(0uz), size_t(-1));
  const auto r = std::ranges::drop_view(s, s.size() - 1);
  const auto b = r.begin(); // <span style="color:red;font-weight:bolder">time out</span>
}
</pre></blockquote>


<note>2025-10-22; Reflector poll. Status changed: New &rarr; Tentatively NAD</note>
<p>
Set priority to 3 after reflector poll, status to Tentatively NAD.
</p>
<p>
"NAD, it's <i>Returns</i>: not '<i>Effects</i>: Equivalent to ...',
implementations need to implement it to return that while meeting the
amortized &#x1d4aa;(1) guarantee."
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4964"/>.
</p>

<ol>

<li><p>Modify <sref ref="[range.drop.view]"/> as indicated:</p>

<pre>
constexpr auto begin()
  requires (!(<i>simple-view</i>&lt;V&gt; &amp;&amp;
              random_access_range&lt;const V&gt; &amp;&amp; sized_range&lt;const V&gt;));
<del>constexpr auto begin() const
  requires random_access_range&lt;const V&gt; &amp;&amp; sized_range&lt;const V&gt;;</del>
</pre>
<blockquote>
<p>
-3- <i>Returns</i>: 
</p>
<ol style="list-style-type: none">
<li><p><ins>(?.?) &mdash; If <tt>V</tt> models <tt>random_access_range</tt> and <tt>sized_range</tt>,</ins></p>
<blockquote><pre>
<ins><tt>ranges::begin(<i>base_</i>) + (ranges::distance(<i>base_</i>) - range_difference_t&lt;V&gt;(size()))</tt></ins>
</pre></blockquote>
</li>
<li><p><ins>(?.?) &mdash; Otherwise,</ins> <tt>ranges::next(ranges::begin(<i>base_</i>), <i>count_</i>, 
ranges::end(<i>base_</i>))</tt>.</p></li>
</ol>
<p>
-4- <i>Remarks</i>: In order to provide the amortized constant-time complexity required by the <tt>range</tt> 
concept when <ins><tt>V</tt></ins><del><tt>drop_view</tt></del> <ins>does not</ins> model<del>s</del> 
<ins><tt>random_access_range</tt> and <tt>sized_range</tt></ins><del><tt>forward_range</tt></del>, 
<ins>this function</ins><del>the first overload</del> caches the result within the <tt>drop_view</tt> for 
use on subsequent calls.
<p/>
[<i>Note 1</i>: Without this, applying a <tt>reverse_view</tt> over a <tt>drop_view</tt> would have quadratic 
iteration complexity. &mdash; <i>end note</i>]
</p>
</blockquote>
<pre><ins>
constexpr auto begin() const
  requires random_access_range&lt;const V&gt; &amp;&amp; sized_range&lt;const V&gt;;</ins>
</pre>
<blockquote>
<p><ins>-?- <i>Returns</i>: <tt>ranges::begin(<i>base_</i>) + (ranges::distance(<i>base_</i>) - 
range_difference_t&lt;const V&gt;(size()))</tt>.</ins></p>
</blockquote>

</li>

</ol>
</resolution>

</issue>
