<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3625" status="Open">
<title>Should <tt>&lt;stacktrace&gt;</tt> provide range access function templates?</title>
<section><sref ref="[stacktrace.syn]"/><sref ref="[iterator.range]"/></section>
<submitter>Jiang An</submitter>
<date>23 Oct 2021</date>
<priority>3</priority>

<discussion>
<p>
Range access function templates (<sref ref="[iterator.range]"/>) are available in every standard header 
for containers. As <tt>std::basic_stacktrace</tt> provides some container-like interfaces (member functions 
<tt>begin</tt>, <tt>end</tt>, <tt>size</tt>, etc.), should we add these free function templates to 
<tt>&lt;stacktrace&gt;</tt> for consistency?
</p>

<note>2021-10-24; Daniel comments</note>
<p>
This issue is related to LWG <iref ref="3624"/>.
</p>

<note>2022-01-29; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

<note>2025-10-07; Status updated New &rarr; Open</note>
<p>
This will be resolved by <paper num="P3016R6"/>.
The <tt>&lt;initializer_list&gt;</tt> part is covered by <iref ref="3624"/>.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="n4901"/>.
</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> The proposed wording below contains one conditional change, it is therefore depending upon
a decision]
</p>
</blockquote>

<ol>
<li><p>Modify <sref ref="[iterator.range]"/> as indicated:</p>

<blockquote>
<p>
-1- In addition to being available via inclusion of the <tt>&lt;iterator&gt;</tt> header, the function templates 
in <sref ref="[iterator.range]"/> are available when any of the following headers are included: 
<tt>&lt;array&gt;</tt> (<sref ref="[array.syn]"/>), <tt>&lt;deque&gt;</tt> (<sref ref="[deque.syn]"/>), 
<tt>&lt;forward_list&gt;</tt> (<sref ref="[forward.list.syn]"/>), <tt>&lt;list&gt;</tt> (<sref ref="[list.syn]"/>), 
<tt>&lt;map&gt;</tt> (<sref ref="[associative.map.syn]"/>), <tt>&lt;regex&gt;</tt> (<sref ref="[re.syn]"/>), 
<tt>&lt;set&gt;</tt> (<sref ref="[associative.set.syn]"/>), <tt>&lt;span&gt;</tt> (<sref ref="[span.syn]"/>), 
<ins><tt>&lt;stacktrace&gt;</tt> (<sref ref="[stacktrace.syn]"/>),</ins> <tt>&lt;string&gt;</tt> (<sref ref="[string.syn]"/>), 
<tt>&lt;string_view&gt;</tt> (<sref ref="[string.view.synop]"/>), <tt>&lt;unordered_map&gt;</tt> (<sref ref="[unord.map.syn]"/>), 
<tt>&lt;unordered_set&gt;</tt> (<sref ref="[unord.set.syn]"/>), and <tt>&lt;vector&gt;</tt> (<sref ref="[vector.syn]"/>).
[&hellip;]
</p>
</blockquote>
</li>
<li><p>If we decide that <tt>&lt;initializer_list&gt;</tt> should be included if the header has dependency on 
<tt>std::initializer_list</tt> (it may be introduce by <tt>std::rbegin</tt>, <tt>std::data</tt>, etc.), 
<tt>#include &lt;initializer_list&gt;</tt> should also be added to <sref ref="[stacktrace.syn]"/>.</p></li>
</ol>
</resolution>

</issue>
