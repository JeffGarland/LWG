<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4282" status="New">
<title>Imprecise <i>Throws</i>: clause in `std::relocate`</title>
<section>
<sref ref="[obj.lifetime]"/>
</section>
<submitter>Giuseppe D'Angelo</submitter>
<date>23 Jun 2025</date>
<priority>2</priority>

<discussion>
<p>
The current specification of `std::relocate` in <sref ref="[obj.lifetime]"/> says
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
<i>Throws</i>: Nothing.
</p>
</blockquote>
<p>
This is imprecise. A trivially relocatable type may feature a throwing
move constructor (or a throwing destructor); for instance, a linked-list
implementation with an externally allocated sentinel node may have a
throwing move constructor, but still be trivially relocatable. Such a
type is nothrow relocatable (as per `is_nothrow_relocatable_v`, cf.
<sref ref="[meta.unary.prop]"/>) and therefore one can call `std::relocate` 
on objects of that type.
<p/>
During constant evaluation, a call to `std::relocate` is specified to
relocate objects via move construction and destruction.
(`std::trivially_relocate` is unavailable during constant evaluation.)
<p/>
Since <paper num="P3068"/> we are allowed to throw during constant evaluation, 
and therefore it's unclear whether `std::relocate` should propagate such an
exception to the caller or should instead make the evaluation not a
constant expression (and therefore make the program ill-formed, since by
construction we end up in this possibility during constant evaluation).
<p/>
Given the rationale brought forward for `std::relocate` in <paper num="P2786"/> 
is to be always a nofail operation, I'm proposing a resolution that goes in
that direction.
</p>

<note>2025-10-22; Reflector poll.</note>
<p>
Set priority to 2 after reflector poll.
</p>
<p>
"PR is incomplete, needs to be 'and <ins>either <code>is_move_constructible_v&lt;T&gt;</code> is false or</ins> an exception is thrown...'"
</p>
<p>
"I think we should use <i>Constant when</i>:."
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5008"/>.
</p>

<ol>
<li><p>Modify <sref ref="[obj.lifetime]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  constexpr T* relocate(T* first, T* last, T* result);
</pre>
<blockquote>
<p>
-16- <i>Mandates</i>: [&hellip;]
<p/>
-17- <i>Preconditions</i>: [&hellip;]
<p/>
-18- <i>Effects</i>: [&hellip;]
<p/>
-19- <i>Returns</i>: `result + (last - first)`.
<p/>
-20- <i>Throws</i>: Nothing.
<p/>
<ins>-?- <i>Remarks</i>: If `relocate` is called during constant evaluation, and an
exception is thrown by a constructor or destructor of `T`, the call to `relocate` 
is not a core constant expression (<sref ref="[expr.const]"/>).</ins>
<p/>
[<i>Note 3</i>: Overlapping ranges are supported. &mdash; <i>end note</i>]
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
